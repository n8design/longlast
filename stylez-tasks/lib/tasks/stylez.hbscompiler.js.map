{"version":3,"names":[],"mappings":"","sources":["tasks/stylez.hbscompiler.js"],"sourcesContent":["const gulp = require('gulp');\n// const gs = require('glob-stream');\n// const chalk = require('chalk');\nconst plumber = require('gulp-plumber');\nconst path = require('path');\nconst handlebars = require('gulp-handlebars');\nconst wrap = require('gulp-wrap');\nconst declare = require('gulp-declare');\nconst concat = require('gulp-concat');\nconst merge = require('merge-stream');\n\n\nconst gulpLoadPlugins = require('gulp-load-plugins');\nconst $ = gulpLoadPlugins();\n\n// const fs = require('fs');\n\n// const processDir = process.cwd();\n\nconst hbsOptions = {\n    handlebars: require('handlebars')\n};\n\nconst namespace = 'stylez.hbs';\n\nclass HbsCompiler {\n\n\n    static compile(src, dest) {\n\n        console.log(src, dest);\n        console.log('Compile HBS');\n\n        let partials = gulp.src(src)\n            .pipe($.plumber())\n            .pipe(handlebars(hbsOptions))\n            .pipe(wrap('Handlebars.registerPartial(<%= imports.processPartialName(file.relative) %>,' +\n                'Handlebars.template(<%= contents %>));', {}, {\n                    imports: {\n                        processPartialName: function (fileName) {\n                            let patternName = path.basename(fileName, '.js');\n                            if (patternName.indexOf('_') === 0) {\n                                patternName = patternName.substr(1);\n                            }\n                            return JSON.stringify(patternName);\n                        }\n                    }\n                }));\n\n        // template stream\n        let templates = gulp.src(src)\n            .pipe(plumber())\n            // handlebars\n            .pipe(handlebars(hbsOptions))\n            // wrap\n            .pipe(wrap('Handlebars.template(<%= contents %>)'))\n            // namespace\n            .pipe(declare({\n                namespace: namespace,\n                noRedeclare: true\n            }));\n\n        // return merge\n        return merge(partials, templates)\n            // concat\n            .pipe(concat(namespace + '.js'))\n            // build\n            .pipe(gulp.dest(dest));\n\n    }\n\n}\n\nmodule.exports = HbsCompiler;"],"file":"stylez.hbscompiler.js"}