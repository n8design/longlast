{"version":3,"names":[],"mappings":"","sources":["tasks/stylez.genconfig.js"],"sourcesContent":["// const fs = require('fs');\nconst path = require('path');\nconst log = require('fancy-log');\nconst chalk = require('chalk');\nconst fs = require('fs');\n\nconst configPath = path.resolve('./src/app/config/stylez.json');\nconst cwd = process.cwd();\n\nconst patternItem = {\n    title: '',\n    name: '',\n    file: '',\n    category: ''\n};\n\nconst defaultConfig = {\n    patterns: []\n};\n// Load current configuration file\nconst loadConfig = () => {\n\n    const config = configPath;\n\n    if (fs.existsSync(config)) {\n\n        let fileContent = fs.readFileSync(config, 'utf-8');\n\n        try {\n\n            let fileJson = JSON.parse(fileContent);\n\n            return fileJson;\n\n        } catch (error) {\n\n            log(error.ERROR);\n\n        }\n\n    } else {\n\n        return defaultConfig;\n\n    }\n\n};\n// Load save changed configuraiton file\nconst saveConfig = (newConfig) => {\n\n    const config = configPath;\n\n    newConfig.patterns = newConfig.patterns.sort((a, b) => {\n\n        if (a.file > b.file) {\n\n            return 1;\n\n        } else if (a.file > b.file) {\n\n            return -1;\n\n        }\n\n        return 0;\n\n    })\n\n    try {\n\n        const newConfigContent = JSON.stringify(newConfig, null, 4);\n\n        fs.writeFileSync(config, newConfigContent, 'UTF-8');\n\n    } catch (error) {\n\n        log.error(error);\n\n    }\n\n};\n\nconst addItem = (config, file) => {\n\n    // get base extension 'hbs'\n    let extension = path.extname(file);\n\n    // get filename\n    let filename = path.basename(file);\n\n    // get path trail to file\n    let dirTrail = path.dirname(file).split(path.sep);\n\n    // create new Pattern Item\n    let curPatternItem = patternItem;\n\n    // define new values for pattern\n    curPatternItem.file = file;\n    curPatternItem.category = dirTrail.pop().split('-').pop();\n    curPatternItem.title = filename.split(extension).shift();\n    curPatternItem.name = filename;\n\n    // Push in a new item\n    config.patterns.push(curPatternItem);\n\n    return config;\n\n};\n\n// calculate current statistics\nconst showStats = (configuration) => {\n\n    const stats = {\n        atoms: 0,\n        molecules: 0,\n        organism: 0,\n        templates: 0,\n        pages: 0,\n        sum: 0\n    };\n\n\n    if (configuration !== null && configuration !== undefined &&\n        configuration.patterns !== null && configuration.patterns !== undefined) {\n\n        configuration\n            .patterns\n            .forEach(item => {\n\n                switch (item.category) {\n                    case 'atoms':\n                        stats.atoms += 1;\n                        break;\n                    case 'molecules':\n                        stats.molecules += 1;\n                        break;\n                    case 'organism':\n                        stats.organism += 1;\n                        break;\n                    case 'templates':\n                        stats.templates += 1;\n                        break;\n                    case 'pages':\n                        stats.pages += 1;\n                        break;\n\n                    default:\n                        break;\n                }\n\n                stats.sum += 1;\n\n            });\n\n        printStats(stats);\n\n    }\n\n};\n\nconst printStats = (stats) => {\n\n    log.info(\n        chalk.bold('Statistics:')\n    );\n\n    log.info(\n        'Overall: ',\n        chalk.green(stats.sum),\n        'Patterns'\n    );\n\n    log.info(\n        chalk.bold('Details: '),\n        chalk.green(stats.atoms), 'Atoms,',\n        chalk.green(stats.molecules), 'Molecules,',\n        chalk.green(stats.organism), 'Organism,',\n        chalk.green(stats.templates), 'Templates,',\n        chalk.green(stats.pages), 'Pages'\n    );\n\n};\n\nclass Genconfig {\n\n    static changed(affectedFile) {\n\n        // get file extension for removal\n        let extension = path.extname(affectedFile);\n\n        // just in case the current file is not an hbs\n        if (extension.toLocaleLowerCase() !== '.hbs') {\n            return;\n        }\n\n        let curConfig = loadConfig();\n\n        let exists = curConfig.patterns.filter(item => {\n\n            return item.file === affectedFile;\n\n        });\n\n        if (exists.length === 0) {\n\n            curConfig = addItem(curConfig, affectedFile);\n\n            log(curConfig);\n\n            saveConfig(curConfig);\n\n            showStats(curConfig);\n\n        } else {\n\n            log.info(\n                chalk.bold('Changed File:'),\n                chalk.green(path.basename(affectedFile))\n            );\n\n            showStats(curConfig);\n\n        }\n\n    }\n\n    static added(affectedFile) {\n\n        let curConfig = loadConfig();\n        log('File added:', affectedFile);\n\n        curConfig = addItem(curConfig, affectedFile);\n\n        saveConfig(curConfig);\n\n        showStats(curConfig);\n\n    }\n\n    static deleted(affectedFile) {\n\n        let curConfig = loadConfig();\n\n        log(curConfig);\n\n        let newConfig = defaultConfig;\n\n        newConfig.patterns = curConfig.patterns.filter(item => item.file !== affectedFile);\n\n        log(newConfig);\n\n        saveConfig(newConfig);\n\n        showStats(curConfig);\n\n    }\n\n    static statupCheck() {\n\n        log.info(chalk.bold('Startup Check:'));\n\n        let curConfig = loadConfig();\n\n        if (curConfig === undefined || curConfig.patterns === undefined) {\n\n            log.error(\n                chalk.red('There is an issue in '),\n                'stylez.json'\n            );\n\n            log.error(\n                chalk.bold('Startup Check:'),\n                chalk.red('... Failed')\n            );\n\n            // Exit all\n            process.exit();\n\n        }\n\n        let checkedConfig = curConfig.patterns.filter(item => {\n\n            let curFile = path.resolve(path.join(cwd, item.file));\n\n            if (fs.existsSync(curFile)) {\n\n                return true;\n\n            } else {\n\n                return false;\n\n            }\n\n        });\n\n        curConfig.patterns = checkedConfig;\n\n        saveConfig(curConfig);\n\n        showStats(curConfig);\n\n        log.info(chalk.bold('Startup Check:'), chalk.green(' ... OK'));\n\n    }\n\n}\n\nmodule.exports = Genconfig;"],"file":"stylez.genconfig.js"}