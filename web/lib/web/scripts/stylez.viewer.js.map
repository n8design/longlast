{"version":3,"sources":["web/scripts/stylez.viewer.js"],"names":["SessionStorage","require","evalHTML","partialHTML","htmlContent","parser","DOMParser","fixedContent","parseFromString","console","log","body","childNodes","partialDoc","DocumentFragment","append","firstChild","innerHTML","error","message","fetchPattern","url","fetch","then","response","status","json","catch","pattern","data","patterns","sort","a","b","file","curSession","getCurrentFilter","currentPatterns","filter","item","category","length","currentFilter","curIndex","index","maxIndex","updateStatus","patternsContainer","document","querySelector","forEach","curTemplate","stylez","templates","title","templateContent","undefined","evaledContent","content","split","pop","replace","insertAdjacentHTML"],"mappings":"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","sourcesContent":["const SessionStorage = require('./stylez.storage');\n\nconst evalHTML = (partialHTML) => {\n\n    let htmlContent;\n\n    try {\n        let parser = new DOMParser();\n        let fixedContent = parser.parseFromString(partialHTML, 'text/html');\n        console.log(fixedContent.body.childNodes);\n\n        let partialDoc = new DocumentFragment();\n        partialDoc.append(fixedContent.body);\n\n        return partialDoc.firstChild.innerHTML;\n\n    } catch (error) {\n        return error.message;\n    }\n\n}\n\nconst fetchPattern = async () => {\n\n    let url = './app/config/stylez.json';\n\n    return fetch(url)\n        .then((response) => {\n\n            if (response.status === 200) {\n\n                return response.json();\n\n            } else {\n\n                throw \"Error current status: \" + response.status + \" - \" + url;\n\n            }\n\n        })\n        .catch(error => {\n\n            console.log('ERROR:::::', error);\n\n        })\n\n}\n\nlet pattern = fetchPattern();\n\npattern.then(data => {\n\n    console.log('DATA::::: ', data);\n\n    let patterns = data.patterns.sort((a, b) => {\n        if (a.file < b.file) {\n            return -1;\n        }\n        if (a.file > b.file) {\n            return 1;\n        }\n        return 0;\n    })\n\n    var curSession = SessionStorage.getCurrentFilter();\n\n    let currentPatterns = patterns.filter(item => {\n        return item.category === curSession.category;\n    });\n\n    if (curSession.category === 'pages' ||\n        curSession.category === 'templates') {\n\n        if (currentPatterns.length !== 0) {\n\n            let currentFilter = SessionStorage.getCurrentFilter(),\n                curIndex = currentFilter.index ? currentFilter.index : 0;\n\n            currentFilter.maxIndex = currentPatterns.length;\n            currentFilter.index = curIndex;\n\n            currentPatterns = [currentPatterns[curIndex]];\n\n            SessionStorage.updateStatus(currentFilter);\n\n        } else {\n\n            currentFilter.maxIndex = null;\n            currentFilter.index = null;\n\n        }\n\n    }\n\n    if (currentPatterns.length !== 0) {\n\n        const patternsContainer = document.querySelector('.patterns');\n\n        currentPatterns.forEach(pattern => {\n\n            let curTemplate = stylez.templates[pattern.title];\n\n            let templateContent;\n\n            try {\n                templateContent = curTemplate();\n            } catch (error) {\n                console.error(`Error in Pattern ${pattern.title}: ${error.message}`);\n                templateContent = `Error in Pattern ${pattern.title}: ${error.message}`;   \n            }\n\n            if (curTemplate !== undefined && templateContent !== 'undefined') {\n\n                let evaledContent = evalHTML(templateContent);\n\n                const content = `<div data-category='${pattern.category}' class='viewer-pattern'>\n            <div class='viewer-header'>\n                <div title='${ pattern.title }' class='viewer-title'>${ pattern.title }</div>\n                <div title='${pattern.file }' class='viewer-filename'>${pattern.file.split('/').pop()}</div>\n            </div>\n            <div class='viewer-content'>\n            ${ evaledContent }\n            </div>\n            <pre class='viewer-code'>${ evaledContent.replace(/</g, '&lt;').replace(/>/g, '&gt;') }</pre>\n            </div>`;\n\n                patternsContainer.insertAdjacentHTML('beforeend', content);\n\n            }\n\n        })\n    }\n\n})"],"file":"stylez.viewer.js"}