!function(t){var e={};function r(n){if(e[n])return e[n].exports;var o=e[n]={i:n,l:!1,exports:{}};return t[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)r.d(n,o,function(e){return t[e]}.bind(null,o));return n},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=70)}([function(t,e){var r=t.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=r)},function(t,e,r){var n=r(18)("wks"),o=r(11),i=r(0).Symbol,u="function"==typeof i;(t.exports=function(t){return n[t]||(n[t]=u&&i[t]||(u?i:o)("Symbol."+t))}).store=n},function(t,e,r){t.exports=!r(5)((function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a}))},function(t,e){t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},function(t,e,r){var n=r(7),o=r(23),i=r(19),u=Object.defineProperty;e.f=r(2)?Object.defineProperty:function(t,e,r){if(n(t),e=i(e,!0),n(r),o)try{return u(t,e,r)}catch(t){}if("get"in r||"set"in r)throw TypeError("Accessors not supported!");return"value"in r&&(t[e]=r.value),t}},function(t,e){t.exports=function(t){try{return!!t()}catch(t){return!0}}},function(t,e,r){var n=r(4),o=r(12);t.exports=r(2)?function(t,e,r){return n.f(t,e,o(1,r))}:function(t,e,r){return t[e]=r,t}},function(t,e,r){var n=r(3);t.exports=function(t){if(!n(t))throw TypeError(t+" is not an object!");return t}},function(t,e,r){var n=r(0),o=r(6),i=r(10),u=r(11)("src"),c=Function.toString,a=(""+c).split("toString");r(9).inspectSource=function(t){return c.call(t)},(t.exports=function(t,e,r,c){var s="function"==typeof r;s&&(i(r,"name")||o(r,"name",e)),t[e]!==r&&(s&&(i(r,u)||o(r,u,t[e]?""+t[e]:a.join(String(e)))),t===n?t[e]=r:c?t[e]?t[e]=r:o(t,e,r):(delete t[e],o(t,e,r)))})(Function.prototype,"toString",(function(){return"function"==typeof this&&this[u]||c.call(this)}))},function(t,e){var r=t.exports={version:"2.5.7"};"number"==typeof __e&&(__e=r)},function(t,e){var r={}.hasOwnProperty;t.exports=function(t,e){return r.call(t,e)}},function(t,e){var r=0,n=Math.random();t.exports=function(t){return"Symbol(".concat(void 0===t?"":t,")_",(++r+n).toString(36))}},function(t,e){t.exports=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}},function(t,e,r){var n=r(25);t.exports=function(t,e,r){if(n(t),void 0===e)return t;switch(r){case 1:return function(r){return t.call(e,r)};case 2:return function(r,n){return t.call(e,r,n)};case 3:return function(r,n,o){return t.call(e,r,n,o)}}return function(){return t.apply(e,arguments)}}},function(t,e){t.exports=!1},function(t,e,r){var n=r(72),o=r(16);t.exports=function(t){return n(o(t))}},function(t,e){t.exports=function(t){if(null==t)throw TypeError("Can't call method on  "+t);return t}},function(t,e,r){var n=r(0),o=r(9),i=r(6),u=r(8),c=r(13),a=function(t,e,r){var s,l,f,p,h=t&a.F,v=t&a.G,d=t&a.S,y=t&a.P,g=t&a.B,m=v?n:d?n[e]||(n[e]={}):(n[e]||{}).prototype,S=v?o:o[e]||(o[e]={}),b=S.prototype||(S.prototype={});for(s in v&&(r=e),r)f=((l=!h&&m&&void 0!==m[s])?m:r)[s],p=g&&l?c(f,n):y&&"function"==typeof f?c(Function.call,f):f,m&&u(m,s,f,t&a.U),S[s]!=f&&i(S,s,p),y&&b[s]!=f&&(b[s]=f)};n.core=o,a.F=1,a.G=2,a.S=4,a.P=8,a.B=16,a.W=32,a.U=64,a.R=128,t.exports=a},function(t,e,r){var n=r(9),o=r(0),i=o["__core-js_shared__"]||(o["__core-js_shared__"]={});(t.exports=function(t,e){return i[t]||(i[t]=void 0!==e?e:{})})("versions",[]).push({version:n.version,mode:r(14)?"pure":"global",copyright:"Â© 2018 Denis Pushkarev (zloirock.ru)"})},function(t,e,r){var n=r(3);t.exports=function(t,e){if(!n(t))return t;var r,o;if(e&&"function"==typeof(r=t.toString)&&!n(o=r.call(t)))return o;if("function"==typeof(r=t.valueOf)&&!n(o=r.call(t)))return o;if(!e&&"function"==typeof(r=t.toString)&&!n(o=r.call(t)))return o;throw TypeError("Can't convert object to primitive value")}},function(t,e){t.exports={}},function(t,e){var r={}.toString;t.exports=function(t){return r.call(t).slice(8,-1)}},function(t,e){t.exports={dmAtomicFilter:".m-filters .a-filter",dmDeviceTypes:".m-devicetypes .a-filter",dmFilterTocs:".m-filtertocs .a-filter",viewerFrame:".o-viewer",tocs:".o-tocs",curWidth:".a-input.js-curWidth",curHeight:".a-input.js-curHeight",pagers:".m-itemslider .a-filter"}},function(t,e,r){t.exports=!r(2)&&!r(5)((function(){return 7!=Object.defineProperty(r(24)("div"),"a",{get:function(){return 7}}).a}))},function(t,e,r){var n=r(3),o=r(0).document,i=n(o)&&n(o.createElement);t.exports=function(t){return i?o.createElement(t):{}}},function(t,e){t.exports=function(t){if("function"!=typeof t)throw TypeError(t+" is not a function!");return t}},function(t,e,r){var n=r(41),o=r(36);t.exports=Object.keys||function(t){return n(t,o)}},function(t,e,r){var n=r(4).f,o=r(10),i=r(1)("toStringTag");t.exports=function(t,e,r){t&&!o(t=r?t:t.prototype,i)&&n(t,i,{configurable:!0,value:e})}},function(t,e,r){var n=r(16);t.exports=function(t){return Object(n(t))}},function(t,e,r){function n(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}var o=r(22),i=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t)}var e,r,i;return e=t,i=[{key:"_returnDefault",value:function(){return{category:"atoms",deviceSize:"full",index:null,maxIndex:null,title:null}}},{key:"_getSelectedCategory",value:function(){var t=document.querySelector(o.dmAtomicFilter+".selected");return null!==t&&null!==t.dataset&&null!==t.dataset.filter&&null!==t.dataset.filter?t.dataset.filter:"atoms"}},{key:"_getSelectedDeviceSize",value:function(){var t=document.querySelector(o.dmDeviceTypes+".selected");return null!==t&&null!==t.dataset&&null!==t.dataset.size&&null!==t.dataset.size?t.dataset.size:"full"}},{key:"updateStatus",value:function(t){if(void 0===t){var e=this._returnDefault(),r=sessionStorage.getItem("stylez");if(null==r)this._getSelectedCategory(),this._getSelectedDeviceSize(),sessionStorage.setItem("stylez",JSON.stringify(e));else{var n=JSON.parse(r);n.category=this._getSelectedCategory(),n.deviceSize=this._getSelectedDeviceSize(),this._getSelectedCategory(),this._getSelectedDeviceSize(),sessionStorage.setItem("stylez",JSON.stringify(n))}}else sessionStorage.setItem("stylez",JSON.stringify(t))}},{key:"setCurrentFilter",value:function(){var e=null!==sessionStorage.getItem("stylez")?JSON.parse(sessionStorage.getItem("stylez")):t._returnDefault(),r=document.querySelector('button[data-filter="'.concat(e.category,'"]'));null!=r&&(r.classList.add("selected"),r.click());var n=document.querySelector('button[data-size="'.concat(e.deviceSize,'"]'));null!=n&&(n.classList.add("selected"),n.click());var o=document.querySelector(".a-filtername");if(null!==e.title)o.textContent=e.title;else{o.textContent=" ";var i=document.querySelector(".m-itemslider");null!==i&&null!==e.maxIndex&&i.classList.add("show")}}},{key:"getCurrentFilter",value:function(){return null!==sessionStorage.getItem("stylez")?JSON.parse(sessionStorage.getItem("stylez")):t._returnDefault()}}],(r=null)&&n(e.prototype,r),i&&n(e,i),t}();t.exports=i},function(t,e,r){"use strict";var n=r(71),o=r(40),i=r(20),u=r(15);t.exports=r(31)(Array,"Array",(function(t,e){this._t=u(t),this._i=0,this._k=e}),(function(){var t=this._t,e=this._k,r=this._i++;return!t||r>=t.length?(this._t=void 0,o(1)):o(0,"keys"==e?r:"values"==e?t[r]:[r,t[r]])}),"values"),i.Arguments=i.Array,n("keys"),n("values"),n("entries")},function(t,e,r){"use strict";var n=r(14),o=r(17),i=r(8),u=r(6),c=r(20),a=r(73),s=r(27),l=r(78),f=r(1)("iterator"),p=!([].keys&&"next"in[].keys()),h=function(){return this};t.exports=function(t,e,r,v,d,y,g){a(r,e,v);var m,S,b,x=function(t){if(!p&&t in E)return E[t];switch(t){case"keys":case"values":return function(){return new r(this,t)}}return function(){return new r(this,t)}},w=e+" Iterator",_="values"==d,O=!1,E=t.prototype,L=E[f]||E["@@iterator"]||d&&E[d],T=L||x(d),j=d?_?x("entries"):T:void 0,k="Array"==e&&E.entries||L;if(k&&(b=l(k.call(new t)))!==Object.prototype&&b.next&&(s(b,w,!0),n||"function"==typeof b[f]||u(b,f,h)),_&&L&&"values"!==L.name&&(O=!0,T=function(){return L.call(this)}),n&&!g||!p&&!O&&E[f]||u(E,f,T),c[e]=T,c[w]=h,d)if(m={values:_?T:x("values"),keys:y?T:x("keys"),entries:j},g)for(S in m)S in E||i(E,S,m[S]);else o(o.P+o.F*(p||O),e,m);return m}},function(t,e,r){var n=r(7),o=r(74),i=r(36),u=r(35)("IE_PROTO"),c=function(){},a=function(){var t,e=r(24)("iframe"),n=i.length;for(e.style.display="none",r(77).appendChild(e),e.src="javascript:",(t=e.contentWindow.document).open(),t.write("<script>document.F=Object<\/script>"),t.close(),a=t.F;n--;)delete a.prototype[i[n]];return a()};t.exports=Object.create||function(t,e){var r;return null!==t?(c.prototype=n(t),r=new c,c.prototype=null,r[u]=t):r=a(),void 0===e?r:o(r,e)}},function(t,e,r){var n=r(34),o=Math.min;t.exports=function(t){return t>0?o(n(t),9007199254740991):0}},function(t,e){var r=Math.ceil,n=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?n:r)(t)}},function(t,e,r){var n=r(18)("keys"),o=r(11);t.exports=function(t){return n[t]||(n[t]=o(t))}},function(t,e){t.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},function(t,e,r){var n=r(11)("meta"),o=r(3),i=r(10),u=r(4).f,c=0,a=Object.isExtensible||function(){return!0},s=!r(5)((function(){return a(Object.preventExtensions({}))})),l=function(t){u(t,n,{value:{i:"O"+ ++c,w:{}}})},f=t.exports={KEY:n,NEED:!1,fastKey:function(t,e){if(!o(t))return"symbol"==typeof t?t:("string"==typeof t?"S":"P")+t;if(!i(t,n)){if(!a(t))return"F";if(!e)return"E";l(t)}return t[n].i},getWeak:function(t,e){if(!i(t,n)){if(!a(t))return!0;if(!e)return!1;l(t)}return t[n].w},onFreeze:function(t){return s&&f.NEED&&a(t)&&!i(t,n)&&l(t),t}}},function(t,e){e.f={}.propertyIsEnumerable},function(t,e,r){var n=function(t){"use strict";var e,r=Object.prototype,n=r.hasOwnProperty,o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",u=o.asyncIterator||"@@asyncIterator",c=o.toStringTag||"@@toStringTag";function a(t,e,r,n){var o=e&&e.prototype instanceof d?e:d,i=Object.create(o.prototype),u=new T(n||[]);return i._invoke=function(t,e,r){var n=l;return function(o,i){if(n===p)throw new Error("Generator is already running");if(n===h){if("throw"===o)throw i;return k()}for(r.method=o,r.arg=i;;){var u=r.delegate;if(u){var c=O(u,r);if(c){if(c===v)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(n===l)throw n=h,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);n=p;var a=s(t,e,r);if("normal"===a.type){if(n=r.done?h:f,a.arg===v)continue;return{value:a.arg,done:r.done}}"throw"===a.type&&(n=h,r.method="throw",r.arg=a.arg)}}}(t,r,u),i}function s(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}t.wrap=a;var l="suspendedStart",f="suspendedYield",p="executing",h="completed",v={};function d(){}function y(){}function g(){}var m={};m[i]=function(){return this};var S=Object.getPrototypeOf,b=S&&S(S(j([])));b&&b!==r&&n.call(b,i)&&(m=b);var x=g.prototype=d.prototype=Object.create(m);function w(t){["next","throw","return"].forEach((function(e){t[e]=function(t){return this._invoke(e,t)}}))}function _(t){var e;this._invoke=function(r,o){function i(){return new Promise((function(e,i){!function e(r,o,i,u){var c=s(t[r],t,o);if("throw"!==c.type){var a=c.arg,l=a.value;return l&&"object"==typeof l&&n.call(l,"__await")?Promise.resolve(l.__await).then((function(t){e("next",t,i,u)}),(function(t){e("throw",t,i,u)})):Promise.resolve(l).then((function(t){a.value=t,i(a)}),(function(t){return e("throw",t,i,u)}))}u(c.arg)}(r,o,e,i)}))}return e=e?e.then(i,i):i()}}function O(t,r){var n=t.iterator[r.method];if(n===e){if(r.delegate=null,"throw"===r.method){if(t.iterator.return&&(r.method="return",r.arg=e,O(t,r),"throw"===r.method))return v;r.method="throw",r.arg=new TypeError("The iterator does not provide a 'throw' method")}return v}var o=s(n,t.iterator,r.arg);if("throw"===o.type)return r.method="throw",r.arg=o.arg,r.delegate=null,v;var i=o.arg;return i?i.done?(r[t.resultName]=i.value,r.next=t.nextLoc,"return"!==r.method&&(r.method="next",r.arg=e),r.delegate=null,v):i:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,v)}function E(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function L(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function T(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(E,this),this.reset(!0)}function j(t){if(t){var r=t[i];if(r)return r.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,u=function r(){for(;++o<t.length;)if(n.call(t,o))return r.value=t[o],r.done=!1,r;return r.value=e,r.done=!0,r};return u.next=u}}return{next:k}}function k(){return{value:e,done:!0}}return y.prototype=x.constructor=g,g.constructor=y,g[c]=y.displayName="GeneratorFunction",t.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===y||"GeneratorFunction"===(e.displayName||e.name))},t.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,g):(t.__proto__=g,c in t||(t[c]="GeneratorFunction")),t.prototype=Object.create(x),t},t.awrap=function(t){return{__await:t}},w(_.prototype),_.prototype[u]=function(){return this},t.AsyncIterator=_,t.async=function(e,r,n,o){var i=new _(a(e,r,n,o));return t.isGeneratorFunction(r)?i:i.next().then((function(t){return t.done?t.value:i.next()}))},w(x),x[c]="Generator",x[i]=function(){return this},x.toString=function(){return"[object Generator]"},t.keys=function(t){var e=[];for(var r in t)e.push(r);return e.reverse(),function r(){for(;e.length;){var n=e.pop();if(n in t)return r.value=n,r.done=!1,r}return r.done=!0,r}},t.values=j,T.prototype={constructor:T,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(L),!t)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=e)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var r=this;function o(n,o){return c.type="throw",c.arg=t,r.next=n,o&&(r.method="next",r.arg=e),!!o}for(var i=this.tryEntries.length-1;i>=0;--i){var u=this.tryEntries[i],c=u.completion;if("root"===u.tryLoc)return o("end");if(u.tryLoc<=this.prev){var a=n.call(u,"catchLoc"),s=n.call(u,"finallyLoc");if(a&&s){if(this.prev<u.catchLoc)return o(u.catchLoc,!0);if(this.prev<u.finallyLoc)return o(u.finallyLoc)}else if(a){if(this.prev<u.catchLoc)return o(u.catchLoc,!0)}else{if(!s)throw new Error("try statement without catch or finally");if(this.prev<u.finallyLoc)return o(u.finallyLoc)}}}},abrupt:function(t,e){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&n.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===t||"continue"===t)&&i.tryLoc<=e&&e<=i.finallyLoc&&(i=null);var u=i?i.completion:{};return u.type=t,u.arg=e,i?(this.method="next",this.next=i.finallyLoc,v):this.complete(u)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),v},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),L(r),v}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if("throw"===n.type){var o=n.arg;L(r)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,r,n){return this.delegate={iterator:j(t),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=e),v}},t}(t.exports);try{regeneratorRuntime=n}catch(t){Function("r","regeneratorRuntime = r")(n)}},function(t,e){t.exports=function(t,e){return{value:e,done:!!t}}},function(t,e,r){var n=r(10),o=r(15),i=r(75)(!1),u=r(35)("IE_PROTO");t.exports=function(t,e){var r,c=o(t),a=0,s=[];for(r in c)r!=u&&n(c,r)&&s.push(r);for(;e.length>a;)n(c,r=e[a++])&&(~i(s,r)||s.push(r));return s}},function(t,e,r){"use strict";var n=r(79),o=r(50);t.exports=r(81)("Set",(function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}}),{add:function(t){return n.def(o(this,"Set"),t=0===t?0:t,t)}},n)},function(t,e,r){var n=r(8);t.exports=function(t,e,r){for(var o in e)n(t,o,e[o],r);return t}},function(t,e){t.exports=function(t,e,r,n){if(!(t instanceof e)||void 0!==n&&n in t)throw TypeError(r+": incorrect invocation!");return t}},function(t,e,r){var n=r(13),o=r(46),i=r(47),u=r(7),c=r(33),a=r(48),s={},l={};(e=t.exports=function(t,e,r,f,p){var h,v,d,y,g=p?function(){return t}:a(t),m=n(r,f,e?2:1),S=0;if("function"!=typeof g)throw TypeError(t+" is not iterable!");if(i(g)){for(h=c(t.length);h>S;S++)if((y=e?m(u(v=t[S])[0],v[1]):m(t[S]))===s||y===l)return y}else for(d=g.call(t);!(v=d.next()).done;)if((y=o(d,m,v.value,e))===s||y===l)return y}).BREAK=s,e.RETURN=l},function(t,e,r){var n=r(7);t.exports=function(t,e,r,o){try{return o?e(n(r)[0],r[1]):e(r)}catch(e){var i=t.return;throw void 0!==i&&n(i.call(t)),e}}},function(t,e,r){var n=r(20),o=r(1)("iterator"),i=Array.prototype;t.exports=function(t){return void 0!==t&&(n.Array===t||i[o]===t)}},function(t,e,r){var n=r(49),o=r(1)("iterator"),i=r(20);t.exports=r(9).getIteratorMethod=function(t){if(null!=t)return t[o]||t["@@iterator"]||i[n(t)]}},function(t,e,r){var n=r(21),o=r(1)("toStringTag"),i="Arguments"==n(function(){return arguments}());t.exports=function(t){var e,r,u;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(r=function(t,e){try{return t[e]}catch(t){}}(e=Object(t),o))?r:i?n(e):"Object"==(u=n(e))&&"function"==typeof e.callee?"Arguments":u}},function(t,e,r){var n=r(3);t.exports=function(t,e){if(!n(t)||t._t!==e)throw TypeError("Incompatible receiver, "+e+" required!");return t}},function(t,e,r){var n=r(1)("iterator"),o=!1;try{var i=[7][n]();i.return=function(){o=!0},Array.from(i,(function(){throw 2}))}catch(t){}t.exports=function(t,e){if(!e&&!o)return!1;var r=!1;try{var i=[7],u=i[n]();u.next=function(){return{done:r=!0}},i[n]=function(){return u},t(i)}catch(t){}return r}},function(t,e,r){var n=r(38),o=r(12),i=r(15),u=r(19),c=r(10),a=r(23),s=Object.getOwnPropertyDescriptor;e.f=r(2)?s:function(t,e){if(t=i(t),e=u(e,!0),a)try{return s(t,e)}catch(t){}if(c(t,e))return o(!n.f.call(t,e),t[e])}},function(t,e,r){"use strict";var n=r(84)(!0);r(31)(String,"String",(function(t){this._t=String(t),this._i=0}),(function(){var t,e=this._t,r=this._i;return r>=e.length?{value:void 0,done:!0}:(t=n(e,r),this._i+=t.length,{value:t,done:!1})}))},function(t,e,r){"use strict";var n=r(13),o=r(17),i=r(28),u=r(46),c=r(47),a=r(33),s=r(85),l=r(48);o(o.S+o.F*!r(51)((function(t){Array.from(t)})),"Array",{from:function(t){var e,r,o,f,p=i(t),h="function"==typeof this?this:Array,v=arguments.length,d=v>1?arguments[1]:void 0,y=void 0!==d,g=0,m=l(p);if(y&&(d=n(d,v>2?arguments[2]:void 0,2)),null==m||h==Array&&c(m))for(r=new h(e=a(p.length));e>g;g++)s(r,g,y?d(p[g],g):p[g]);else for(f=m.call(p),r=new h;!(o=f.next()).done;g++)s(r,g,y?u(f,d,[o.value,g],!0):o.value);return r.length=g,r}})},function(t,e,r){"use strict";r(86);var n=r(7),o=r(56),i=r(2),u=/./.toString,c=function(t){r(8)(RegExp.prototype,"toString",t,!0)};r(5)((function(){return"/a/b"!=u.call({source:"a",flags:"b"})}))?c((function(){var t=n(this);return"/".concat(t.source,"/","flags"in t?t.flags:!i&&t instanceof RegExp?o.call(t):void 0)})):"toString"!=u.name&&c((function(){return u.call(this)}))},function(t,e,r){"use strict";var n=r(7);t.exports=function(){var t=n(this),e="";return t.global&&(e+="g"),t.ignoreCase&&(e+="i"),t.multiline&&(e+="m"),t.unicode&&(e+="u"),t.sticky&&(e+="y"),e}},function(t,e,r){"use strict";var n=r(49),o={};o[r(1)("toStringTag")]="z",o+""!="[object z]"&&r(8)(Object.prototype,"toString",(function(){return"[object "+n(this)+"]"}),!0)},function(t,e,r){r(59)("asyncIterator")},function(t,e,r){var n=r(0),o=r(9),i=r(14),u=r(60),c=r(4).f;t.exports=function(t){var e=o.Symbol||(o.Symbol=i?{}:n.Symbol||{});"_"==t.charAt(0)||t in e||c(e,t,{value:u.f(t)})}},function(t,e,r){e.f=r(1)},function(t,e,r){"use strict";var n=r(0),o=r(10),i=r(2),u=r(17),c=r(8),a=r(37).KEY,s=r(5),l=r(18),f=r(27),p=r(11),h=r(1),v=r(60),d=r(59),y=r(87),g=r(88),m=r(7),S=r(3),b=r(15),x=r(19),w=r(12),_=r(32),O=r(89),E=r(52),L=r(4),T=r(26),j=E.f,k=L.f,A=O.f,P=n.Symbol,C=n.JSON,F=C&&C.stringify,I=h("_hidden"),N=h("toPrimitive"),z={}.propertyIsEnumerable,M=l("symbol-registry"),q=l("symbols"),D=l("op-symbols"),R=Object.prototype,G="function"==typeof P,W=n.QObject,J=!W||!W.prototype||!W.prototype.findChild,H=i&&s((function(){return 7!=_(k({},"a",{get:function(){return k(this,"a",{value:7}).a}})).a}))?function(t,e,r){var n=j(R,e);n&&delete R[e],k(t,e,r),n&&t!==R&&k(R,e,n)}:k,B=function(t){var e=q[t]=_(P.prototype);return e._k=t,e},V=G&&"symbol"==typeof P.iterator?function(t){return"symbol"==typeof t}:function(t){return t instanceof P},U=function(t,e,r){return t===R&&U(D,e,r),m(t),e=x(e,!0),m(r),o(q,e)?(r.enumerable?(o(t,I)&&t[I][e]&&(t[I][e]=!1),r=_(r,{enumerable:w(0,!1)})):(o(t,I)||k(t,I,w(1,{})),t[I][e]=!0),H(t,e,r)):k(t,e,r)},Y=function(t,e){m(t);for(var r,n=y(e=b(e)),o=0,i=n.length;i>o;)U(t,r=n[o++],e[r]);return t},K=function(t){var e=z.call(this,t=x(t,!0));return!(this===R&&o(q,t)&&!o(D,t))&&(!(e||!o(this,t)||!o(q,t)||o(this,I)&&this[I][t])||e)},X=function(t,e){if(t=b(t),e=x(e,!0),t!==R||!o(q,e)||o(D,e)){var r=j(t,e);return!r||!o(q,e)||o(t,I)&&t[I][e]||(r.enumerable=!0),r}},Q=function(t){for(var e,r=A(b(t)),n=[],i=0;r.length>i;)o(q,e=r[i++])||e==I||e==a||n.push(e);return n},Z=function(t){for(var e,r=t===R,n=A(r?D:b(t)),i=[],u=0;n.length>u;)!o(q,e=n[u++])||r&&!o(R,e)||i.push(q[e]);return i};G||(c((P=function(){if(this instanceof P)throw TypeError("Symbol is not a constructor!");var t=p(arguments.length>0?arguments[0]:void 0),e=function(r){this===R&&e.call(D,r),o(this,I)&&o(this[I],t)&&(this[I][t]=!1),H(this,t,w(1,r))};return i&&J&&H(R,t,{configurable:!0,set:e}),B(t)}).prototype,"toString",(function(){return this._k})),E.f=X,L.f=U,r(63).f=O.f=Q,r(38).f=K,r(62).f=Z,i&&!r(14)&&c(R,"propertyIsEnumerable",K,!0),v.f=function(t){return B(h(t))}),u(u.G+u.W+u.F*!G,{Symbol:P});for(var $="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),tt=0;$.length>tt;)h($[tt++]);for(var et=T(h.store),rt=0;et.length>rt;)d(et[rt++]);u(u.S+u.F*!G,"Symbol",{for:function(t){return o(M,t+="")?M[t]:M[t]=P(t)},keyFor:function(t){if(!V(t))throw TypeError(t+" is not a symbol!");for(var e in M)if(M[e]===t)return e},useSetter:function(){J=!0},useSimple:function(){J=!1}}),u(u.S+u.F*!G,"Object",{create:function(t,e){return void 0===e?_(t):Y(_(t),e)},defineProperty:U,defineProperties:Y,getOwnPropertyDescriptor:X,getOwnPropertyNames:Q,getOwnPropertySymbols:Z}),C&&u(u.S+u.F*(!G||s((function(){var t=P();return"[null]"!=F([t])||"{}"!=F({a:t})||"{}"!=F(Object(t))}))),"JSON",{stringify:function(t){for(var e,r,n=[t],o=1;arguments.length>o;)n.push(arguments[o++]);if(r=e=n[1],(S(e)||void 0!==t)&&!V(t))return g(e)||(e=function(t,e){if("function"==typeof r&&(e=r.call(this,t,e)),!V(e))return e}),n[1]=e,F.apply(C,n)}}),P.prototype[N]||r(6)(P.prototype,N,P.prototype.valueOf),f(P,"Symbol"),f(Math,"Math",!0),f(n.JSON,"JSON",!0)},function(t,e){e.f=Object.getOwnPropertySymbols},function(t,e,r){var n=r(41),o=r(36).concat("length","prototype");e.f=Object.getOwnPropertyNames||function(t){return n(t,o)}},function(t,e,r){for(var n=r(30),o=r(26),i=r(8),u=r(0),c=r(6),a=r(20),s=r(1),l=s("iterator"),f=s("toStringTag"),p=a.Array,h={CSSRuleList:!0,CSSStyleDeclaration:!1,CSSValueList:!1,ClientRectList:!1,DOMRectList:!1,DOMStringList:!1,DOMTokenList:!0,DataTransferItemList:!1,FileList:!1,HTMLAllCollection:!1,HTMLCollection:!1,HTMLFormElement:!1,HTMLSelectElement:!1,MediaList:!0,MimeTypeArray:!1,NamedNodeMap:!1,NodeList:!0,PaintRequestList:!1,Plugin:!1,PluginArray:!1,SVGLengthList:!1,SVGNumberList:!1,SVGPathSegList:!1,SVGPointList:!1,SVGStringList:!1,SVGTransformList:!1,SourceBufferList:!1,StyleSheetList:!0,TextTrackCueList:!1,TextTrackList:!1,TouchList:!1},v=o(h),d=0;d<v.length;d++){var y,g=v[d],m=h[g],S=u[g],b=S&&S.prototype;if(b&&(b[l]||c(b,l,p),b[f]||c(b,f,g),a[g]=p,m))for(y in n)b[y]||i(b,y,n[y],!0)}},,,,,,function(t,e,r){"use strict";r.r(e),r.d(e,"Stylez",(function(){return a}));r(30),r(42),r(53),r(54),r(55),r(57),r(58),r(61),r(64),r(39);function n(t){return function(t){if(Array.isArray(t)){for(var e=0,r=new Array(t.length);e<t.length;e++)r[e]=t[e];return r}}(t)||function(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function o(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}var i=r(22),u=r(29),c=r(90),a=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),window.addEventListener("storage",c.detectStorageChange),this.CONSTANTS=i,this.Events=c,this.btnsCatFilter=document.querySelectorAll(this.CONSTANTS.dmAtomicFilter),this.btnsCatFilter.forEach((function(t){t.addEventListener("click",c.filterCategories)})),this.btnDeviceSelector=document.querySelectorAll(this.CONSTANTS.dmDeviceTypes),this.btnDeviceSelector.forEach((function(t){t.addEventListener("click",c.filterDeviceType)})),window.addEventListener("resize",c.setWidth),c.setWidth(null),this.btnTocs=document.querySelector(this.CONSTANTS.dmFilterTocs),null!==this.btnTocs&&null!==this.btnTocs&&this.btnTocs.addEventListener("click",c.toggleTocs),this.btnPagers=document.querySelectorAll(this.CONSTANTS.pagers),this.btnPagers.forEach((function(t){t.addEventListener("click",c.changeIndex)})),u.setCurrentFilter(),c.detectStorageChange(null),this.renderToc()}var e,r,a;return e=t,(r=[{key:"_fetchPattern",value:function(){var t;return regeneratorRuntime.async((function(e){for(;;)switch(e.prev=e.next){case 0:return t="./config/stylez.json",e.next=3,regeneratorRuntime.awrap(fetch(t).then((function(e){if(200===e.status)return e.json();throw"Error current status: "+e.status+" - "+t})).catch((function(t){console.error("ERROR :::",t)})));case 3:return e.abrupt("return",e.sent);case 4:case"end":return e.stop()}}))}},{key:"renderToc",value:function(){var t=this,e=document.querySelector(".o-tocsinner"),r=this._fetchPattern(),o={};r.then((function(r){var i=r.patterns,u=n(new Set(i.map((function(t){return t.category})))),c=new Object;u.forEach((function(t){c[t]=0})),r.patterns.forEach((function(t){void 0===o[t.category]&&(o[t.category]=""),o[t.category]+="<li><button \n                data-filter='".concat(t.category,"' \n                data-index='").concat(c[t.category],"' \n                class='a-toc-toggle'>").concat(t.title,"</button></li>"),c[t.category]+=1}));var a="<ul><li><h2>Atoms</h2><ol>".concat(void 0===o.atoms?"":o.atoms,"</ol></li></ul>\n            <ul><li><h2>Molecules</h2><ol>").concat(void 0===o.molecules?"":o.molecules,"</ol></li></ul>\n            <ul><li><h2>Organism</h2><ol>").concat(void 0===o.organism?"":o.organism,"</ol></li></ul>\n            <ul><li><h2>Templates</h2><ol>").concat(void 0===o.templates?"":o.templates,"</ol></li></ul>\n            <ul><li><h2>Pages</h2><ol>").concat(void 0===o.pages?"":o.pages,"</ol></li></ul>");e.innerHTML=a,document.querySelectorAll(".a-toc-toggle").forEach((function(e){e.addEventListener("click",t.Events.setTocFilter)}))}))}}])&&o(e.prototype,r),a&&o(e,a),t}();new a},function(t,e,r){var n=r(1)("unscopables"),o=Array.prototype;null==o[n]&&r(6)(o,n,{}),t.exports=function(t){o[n][t]=!0}},function(t,e,r){var n=r(21);t.exports=Object("z").propertyIsEnumerable(0)?Object:function(t){return"String"==n(t)?t.split(""):Object(t)}},function(t,e,r){"use strict";var n=r(32),o=r(12),i=r(27),u={};r(6)(u,r(1)("iterator"),(function(){return this})),t.exports=function(t,e,r){t.prototype=n(u,{next:o(1,r)}),i(t,e+" Iterator")}},function(t,e,r){var n=r(4),o=r(7),i=r(26);t.exports=r(2)?Object.defineProperties:function(t,e){o(t);for(var r,u=i(e),c=u.length,a=0;c>a;)n.f(t,r=u[a++],e[r]);return t}},function(t,e,r){var n=r(15),o=r(33),i=r(76);t.exports=function(t){return function(e,r,u){var c,a=n(e),s=o(a.length),l=i(u,s);if(t&&r!=r){for(;s>l;)if((c=a[l++])!=c)return!0}else for(;s>l;l++)if((t||l in a)&&a[l]===r)return t||l||0;return!t&&-1}}},function(t,e,r){var n=r(34),o=Math.max,i=Math.min;t.exports=function(t,e){return(t=n(t))<0?o(t+e,0):i(t,e)}},function(t,e,r){var n=r(0).document;t.exports=n&&n.documentElement},function(t,e,r){var n=r(10),o=r(28),i=r(35)("IE_PROTO"),u=Object.prototype;t.exports=Object.getPrototypeOf||function(t){return t=o(t),n(t,i)?t[i]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?u:null}},function(t,e,r){"use strict";var n=r(4).f,o=r(32),i=r(43),u=r(13),c=r(44),a=r(45),s=r(31),l=r(40),f=r(80),p=r(2),h=r(37).fastKey,v=r(50),d=p?"_s":"size",y=function(t,e){var r,n=h(e);if("F"!==n)return t._i[n];for(r=t._f;r;r=r.n)if(r.k==e)return r};t.exports={getConstructor:function(t,e,r,s){var l=t((function(t,n){c(t,l,e,"_i"),t._t=e,t._i=o(null),t._f=void 0,t._l=void 0,t[d]=0,null!=n&&a(n,r,t[s],t)}));return i(l.prototype,{clear:function(){for(var t=v(this,e),r=t._i,n=t._f;n;n=n.n)n.r=!0,n.p&&(n.p=n.p.n=void 0),delete r[n.i];t._f=t._l=void 0,t[d]=0},delete:function(t){var r=v(this,e),n=y(r,t);if(n){var o=n.n,i=n.p;delete r._i[n.i],n.r=!0,i&&(i.n=o),o&&(o.p=i),r._f==n&&(r._f=o),r._l==n&&(r._l=i),r[d]--}return!!n},forEach:function(t){v(this,e);for(var r,n=u(t,arguments.length>1?arguments[1]:void 0,3);r=r?r.n:this._f;)for(n(r.v,r.k,this);r&&r.r;)r=r.p},has:function(t){return!!y(v(this,e),t)}}),p&&n(l.prototype,"size",{get:function(){return v(this,e)[d]}}),l},def:function(t,e,r){var n,o,i=y(t,e);return i?i.v=r:(t._l=i={i:o=h(e,!0),k:e,v:r,p:n=t._l,n:void 0,r:!1},t._f||(t._f=i),n&&(n.n=i),t[d]++,"F"!==o&&(t._i[o]=i)),t},getEntry:y,setStrong:function(t,e,r){s(t,e,(function(t,r){this._t=v(t,e),this._k=r,this._l=void 0}),(function(){for(var t=this._k,e=this._l;e&&e.r;)e=e.p;return this._t&&(this._l=e=e?e.n:this._t._f)?l(0,"keys"==t?e.k:"values"==t?e.v:[e.k,e.v]):(this._t=void 0,l(1))}),r?"entries":"values",!r,!0),f(e)}}},function(t,e,r){"use strict";var n=r(0),o=r(4),i=r(2),u=r(1)("species");t.exports=function(t){var e=n[t];i&&e&&!e[u]&&o.f(e,u,{configurable:!0,get:function(){return this}})}},function(t,e,r){"use strict";var n=r(0),o=r(17),i=r(8),u=r(43),c=r(37),a=r(45),s=r(44),l=r(3),f=r(5),p=r(51),h=r(27),v=r(82);t.exports=function(t,e,r,d,y,g){var m=n[t],S=m,b=y?"set":"add",x=S&&S.prototype,w={},_=function(t){var e=x[t];i(x,t,"delete"==t?function(t){return!(g&&!l(t))&&e.call(this,0===t?0:t)}:"has"==t?function(t){return!(g&&!l(t))&&e.call(this,0===t?0:t)}:"get"==t?function(t){return g&&!l(t)?void 0:e.call(this,0===t?0:t)}:"add"==t?function(t){return e.call(this,0===t?0:t),this}:function(t,r){return e.call(this,0===t?0:t,r),this})};if("function"==typeof S&&(g||x.forEach&&!f((function(){(new S).entries().next()})))){var O=new S,E=O[b](g?{}:-0,1)!=O,L=f((function(){O.has(1)})),T=p((function(t){new S(t)})),j=!g&&f((function(){for(var t=new S,e=5;e--;)t[b](e,e);return!t.has(-0)}));T||((S=e((function(e,r){s(e,S,t);var n=v(new m,e,S);return null!=r&&a(r,y,n[b],n),n}))).prototype=x,x.constructor=S),(L||j)&&(_("delete"),_("has"),y&&_("get")),(j||E)&&_(b),g&&x.clear&&delete x.clear}else S=d.getConstructor(e,t,y,b),u(S.prototype,r),c.NEED=!0;return h(S,t),w[t]=S,o(o.G+o.W+o.F*(S!=m),w),g||d.setStrong(S,t,y),S}},function(t,e,r){var n=r(3),o=r(83).set;t.exports=function(t,e,r){var i,u=e.constructor;return u!==r&&"function"==typeof u&&(i=u.prototype)!==r.prototype&&n(i)&&o&&o(t,i),t}},function(t,e,r){var n=r(3),o=r(7),i=function(t,e){if(o(t),!n(e)&&null!==e)throw TypeError(e+": can't set as prototype!")};t.exports={set:Object.setPrototypeOf||("__proto__"in{}?function(t,e,n){try{(n=r(13)(Function.call,r(52).f(Object.prototype,"__proto__").set,2))(t,[]),e=!(t instanceof Array)}catch(t){e=!0}return function(t,r){return i(t,r),e?t.__proto__=r:n(t,r),t}}({},!1):void 0),check:i}},function(t,e,r){var n=r(34),o=r(16);t.exports=function(t){return function(e,r){var i,u,c=String(o(e)),a=n(r),s=c.length;return a<0||a>=s?t?"":void 0:(i=c.charCodeAt(a))<55296||i>56319||a+1===s||(u=c.charCodeAt(a+1))<56320||u>57343?t?c.charAt(a):i:t?c.slice(a,a+2):u-56320+(i-55296<<10)+65536}}},function(t,e,r){"use strict";var n=r(4),o=r(12);t.exports=function(t,e,r){e in t?n.f(t,e,o(0,r)):t[e]=r}},function(t,e,r){r(2)&&"g"!=/./g.flags&&r(4).f(RegExp.prototype,"flags",{configurable:!0,get:r(56)})},function(t,e,r){var n=r(26),o=r(62),i=r(38);t.exports=function(t){var e=n(t),r=o.f;if(r)for(var u,c=r(t),a=i.f,s=0;c.length>s;)a.call(t,u=c[s++])&&e.push(u);return e}},function(t,e,r){var n=r(21);t.exports=Array.isArray||function(t){return"Array"==n(t)}},function(t,e,r){var n=r(15),o=r(63).f,i={}.toString,u="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];t.exports.f=function(t){return u&&"[object Window]"==i.call(t)?function(t){try{return o(t)}catch(t){return u.slice()}}(t):o(n(t))}},function(t,e,r){function n(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}var o=r(22),i=r(29),u=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t)}var e,r,u;return e=t,u=[{key:"_updateIframeContent",value:function(){document.querySelector(o.viewerFrame).contentWindow.location.href="viewer.html"}},{key:"_toggleButtons",value:function(t,e){t.forEach((function(t){t===e?t.classList.add("selected"):t.classList.remove("selected")})),i.updateStatus()}},{key:"filterCategories",value:function(e){if(null!==e.target.dataset&&null!==e.target.dataset.filter&&["atoms","molecules","organism"].indexOf(e.target.dataset.filter),t.detectUserClick(e)){var r=i.getCurrentFilter();r.category=e.target.dataset.filter,r.index=null,r.maxIndex=null,i.updateStatus(r)}var n=e.target,u=document.querySelectorAll(o.dmAtomicFilter);t._toggleButtons(u,n),t._updateIframeContent()}},{key:"filterDeviceType",value:function(e){var r=e.target,n=document.querySelectorAll(o.dmDeviceTypes),i=document.querySelector(o.viewerFrame);t._toggleButtons(n,r);var u="full"!==r.dataset.size?r.dataset.size:-1;i.style.maxWidth=-1!==u?"".concat(u,"px"):"100vw"}},{key:"setWidth",value:function(t){setTimeout((function(){var t=document.querySelector(o.curWidth);null!=t&&(t.value=window.innerWidth);var e=document.querySelector(o.curHeight);null!=e&&(e.value=window.innerHeight)}),250)}},{key:"toggleTocs",value:function(t){document.querySelector(o.tocs).classList.toggle("active")}},{key:"setTocFilter",value:function(e){e.preventDefault();var r=e.target,n=r.dataset.index,o=r.dataset.filter,u=i.getCurrentFilter();u.category=o,u.index=parseInt(n),u.maxIndex=document.querySelectorAll("button.a-toc-toggle[data-filter='".concat(o,"']")).length,i.updateStatus(u),document.querySelector(".o-tocs").classList.remove("active");var c=document.querySelector("button.a-filter[data-filter='".concat(o,"']")),a=document.querySelectorAll("button.a-filter");t._toggleButtons(a,c),t.detectStorageChange(null),t._updateIframeContent()}},{key:"changeIndex",value:function(e){var r=e.target;if(void 0!==r.dataset&&void 0!==r.dataset.filter){var n=i.getCurrentFilter();"next-item"===r.dataset.filter&&(n.index+1<n.maxIndex?n.index=n.index+1:n.index=0,i.updateStatus(n),t._updateIframeContent()),"prev-item"===r.dataset.filter&&(n.index-1>=0?n.index=n.index-1:n.index=n.maxIndex,i.updateStatus(n),t._updateIframeContent())}}},{key:"detectStorageChange",value:function(t){var e=i.getCurrentFilter();if(null!==e.title&&null!==e.maxIndex&&e.maxIndex>1){document.querySelector(".a-filtername").textContent=e.title;var r=document.querySelector(".m-itemslider");null!==r&&(r.classList.remove("hidden"),r.classList.add("show"),r.setAttribute("aria-hidden",!1),r.setAttribute("aria-disabled",!1))}else{var n=document.querySelector(".m-itemslider");null!==n&&(n.classList.add("hidden"),n.classList.remove("show"),n.setAttribute("aria-hidden",!0),n.setAttribute("aria-disabled",!0))}}},{key:"detectUserClick",value:function(t){return t.screenX&&0!=t.screenX&&t.screenY&&0!=t.screenY}}],(r=null)&&n(e.prototype,r),u&&n(e,u),t}();t.exports=u}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,